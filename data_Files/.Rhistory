# Create a new data frame `by_type` by grouping the `avocados` dataframe by
# `Date` and `type`, and calculating the sum of the `Total.Volume` for that type
# in that week (resulting in a data frame with 2 rows per week).
by_type <- avocados %>%
group_by(Date, type)%>%
summarize(
sumofType = sum(volume)
)
# We can also investigate sales by avocado type (conventional, organic).
# Create a new data frame `by_type` by grouping the `avocados` dataframe by
# `Date` and `type`, and calculating the sum of the `Total.Volume` for that type
# in that week (resulting in a data frame with 2 rows per week).
by_type <- avocados %>%
group_by(Date, type)%>%
summarize(
sumofType = sum(Total.Volume)
)
View(by_type)
# To make a (visual) comparison of conventional versus organic sales, you
# need to **spread** out the `type` column into two different columns. Create a
# new data frame `by_type_wide` by passing the `by_type` data frame to
# the `spread()` function!
spread(by_type, key=type, value = sumofType, -Date)
# To make a (visual) comparison of conventional versus organic sales, you
# need to **spread** out the `type` column into two different columns. Create a
# new data frame `by_type_wide` by passing the `by_type` data frame to
# the `spread()` function!
spread(by_type, key=type, value = sumofType)
# Now you can create a scatterplot comparing conventional to organic sales!
# (how to write this code is covered in Chapter 16)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
# To make a (visual) comparison of conventional versus organic sales, you
# need to **spread** out the `type` column into two different columns. Create a
# new data frame `by_type_wide` by passing the `by_type` data frame to
# the `spread()` function!
by_type_wide <- spread(by_type, key=type, value = sumofType)
# Now you can create a scatterplot comparing conventional to organic sales!
# (how to write this code is covered in Chapter 16)
ggplot(by_type_wide) +
geom_point(mapping = aes(x = conventional, y = organic, color = Date))
#Chapter Thirteen Work
install.packages("dbplyr")
install.packages("RSQLite")
install.packages("RPostGreSQL")
install.packages("RSQLite")
setwd("~/GitHub/workFromRDataScienceTextbook/data_Files")
# Install and load the `dplyr`, `DBI`, and `RSQLite` packages for accessing
# databases
library(dplyr)
library(DBI)
library(RSQLite)
# Create a connection to the `Chinook_Sqlite.sqlite` file in the `data` folder
# Be sure to set your working directory!
db_Connection <-  dbConnect(SQLite(), dbname = "Chinook_Sqlite.sqlite")
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_Connection)
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
songs_Table <- tbl(db_Connection)
Print(songs_Table)
print(songs_Table)
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
songs_Table <- tbl(db_Connection)
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
songs_Table <- tbl(db_Connection, "Album")
print(songs_Table)
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
songs_Table <- tbl(db_Connection, "Genre")
print(songs_Table)
# Use the `tbl()`function to create a reference to the table of music genres.
# Print out the the table to confirm that you've accessed it.
genre_Table <- tbl(db_Connection, "Genre")
print(genre_Table)
# Try to use `View()` to see the contents of the table. What happened?
View(genre_Table)
# Use the `collect()` function to actually load the genre table into memory
# as a data frame. View that data frame.
genreDF <- collect(genre_Table)
View(genreDF)
# Use dplyr's `count()` function to see how many rows are in the genre table
count(genreDF)
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_Connection)
# Use the `tbl()` function to create a reference the table with track data.
# Print out the the table to confirm that you've accessed it.
track_Table <- tbl(db_Connection, "Track")
tableDF <- collect(track_Table)
View(tableDF)
# Use the `tbl()` function to create a reference the table with track data.
# Print out the the table to confirm that you've accessed it.
track_Table <- tbl(db_Connection, "Artist")
tableDF <- collect(track_Table)
View(tableDF)
# Use the `tbl()` function to create a reference the table with track data.
# Print out the the table to confirm that you've accessed it.
track_Table <- tbl(db_Connection, "Track")
tableDF <- collect(track_Table)
View(tableDF)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- track_Table %>%
filter(is.na())
artistsWithMostTracks
View(artistsWithMostTracks)
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_Connection)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na()) %>%
group_by(Artist) %>%
summarize(
artistTotal = count(Artist)
) %>%
arrange(artistTotal)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na(Artist)) %>%
group_by(Artist) %>%
summarize(
artistTotal = count(Artist)
) %>%
arrange(artistTotal)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- db_Connection %>%
filter(is.na(Artist)) %>%
group_by(Artist) %>%
summarize(
artistTotal = count(Artist)
) %>%
arrange(artistTotal)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na(Composer)) %>%
group_by(Composer) %>%
summarize(
artistTotal = count(Composer)
) %>%
arrange(artistTotal)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na(Composer)) %>%
group_by(Composer)
artistsWithMostTracks
View(artistsWithMostTracks)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na(FALSE)) %>%
group_by(Composer)
View(artistsWithMostTracks)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na(Composer)== FALSE) %>%
group_by(Composer) %>%
count() %>%
View(artistsWithMostTracks)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na(Composer)== FALSE) %>%
group_by(Composer) %>%
count() %>%
View(artistsWithMostTracks)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na(Composer)== FALSE) %>%
group_by(Composer) %>%
count() %>%
arrange(-n)
# Use dplyr functions to query for a list of artists in descending order by
# popularity in the database (e.g., the artist with the most tracks at the top)
# - Start by filtering for rows that have an artist listed (use `is.na()`), then
#   group rows by the artist and count them. Finally, arrange the results.
# - Use pipes to do this all as one statement without collecting the data into
#   memory!
artistsWithMostTracks <- tableDF %>%
filter(is.na(Composer)== FALSE) %>%
group_by(Composer) %>%
count(Composer) %>%
arrange(-n)
View(artistsWithMostTracks)
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
mostPopularGenre <- tableDF %>%
filter(is.na(GenreId)== FALSE) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n)
View(mostPopularGenre)
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
mostPopularGenre <- tableDF %>%
filter(is.na(GenreId)== FALSE) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n) %>%
left_join(
genreDF,
by = GenreId
)
View(mostPopularGenre)
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
mostPopularGenre <- tableDF %>%
filter(is.na(GenreId)== FALSE) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n) %>%
right_join(
genreDF,
by = GenreId
)
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
mostPopularGenre <- tableDF %>%
filter(is.na(GenreId)== FALSE) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n) %>%
left_join(
genreDF,
by = "GenreId"
)
View(mostPopularGenre)
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
mostPopularGenre <- tableDF %>%
filter(is.na(GenreId)== FALSE) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n) %>%
left_join(
genreDF,
by = "GenreId"
) %>%
select(Name, n)
View(mostPopularGenre)
# Use dplyr functions to query for the most popular _genre_ in the library.
# You will need to count the number of occurrences of each genre, and join the
# two tables together in order to also access the genre name.
# Collect the resulting data into memory in order to access the specific row of
# interest
mostPopularGenre <- tableDF %>%
filter(is.na(GenreId)== FALSE) %>%
group_by(GenreId) %>%
count(GenreId) %>%
arrange(-n) %>%
left_join(
genreDF,
by = "GenreId"
) %>%
select(Name, n)
# Use the `dbListTables()` function (passing in the connection) to get a list
# of tables in the database.
dbListTables(db_Connection)
# Remember to disconnect from the database once you are done with it!
dbDisconnect(db_connection)
# Remember to disconnect from the database once you are done with it!
dbDisconnect(db_Connection)
install.packacges("httr")
install.packages("httr")
#CHAPTER 14 STUFF
#install.packages("httr")
library(httr)
url <- "https://api.github.com/search/repositories?q=dplyr&sort=forks"
response <- GET(url)
View(response)
# Construct your `resource_uri` from a reusable `base_uri` and an `endpoint`
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
# Store any query parameters you want to use in a list
query_params <- list(q = "dplyr", sort = "forks")
# Make your request, specifying the query parameters via the `query` argument
response <- GET(resource_uri, query_params)
print(response)
# Make your request, specifying the query parameters via the `query` argument
response <- GET(resource_uri, query_params)
View(response)
View(response)
response_text <- content(response, type = "text")
# Make your request, specifying the query parameters via the `query` argument
response <- GET(resource_uri, query_params)
#extract content from `response` as a text string
response_text <- content(response, type = "text")
url <- "https://api.github.com/search/repositories?q=dplyr&sort=forks"
response <- GET(url)
print(response)
# Construct your `resource_uri` from a reusable `base_uri` and an `endpoint`
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
# Store any query parameters you want to use in a list
query_params <- list(q = "dplyr", sort = "forks")
# Make your request, specifying the query parameters via the `query` argument
response <- GET(resource_uri, query_params)
print(response)
url <- "https://api.github.com/search/repositories?q=dplyr&sort=forks"
response <- GET(url)
print(response)
# Construct your `resource_uri` from a reusable `base_uri` and an `endpoint`
base_uri <- "https://api.github.com"
endpoint <- "/search/repositories"
resource_uri <- paste0(base_uri, endpoint)
# Store any query parameters you want to use in a list
query_params <- list(q = "dplyr", sort = "forks")
# Make your request, specifying the query parameters via the `query` argument
response2 <- GET(resource_uri, query_params)
print(response2)
resource_uri
# Make your request, specifying the query parameters via the `query` argument
response2 <- GET(resource_uri, query = query_params)
print(response2)
#extract content from `response` as a text string
response_text <- content(response2, type = "text")
#extract content from `response` as a text string
response_text <- content(response, type = "text")
#extract content from `response` as a text string
response_text <- content(response, type = "text")
print(response_text)
#extract content from `response` as a text string
response_text <- content(response2, type = "text")
print(response_text)
#PARSING JSON
install.packages("jsonlite")
#PARSING JSON
#install.packages("jsonlite")
library(jsonlite)
#convert a  JSON string to a list
response_data <- fromJSON(response_text)
response_data
View(response_data)
#check if it is a data frame already
is.data.frame(response_data)
#inspect the data
str(response_data)
names(response_data)
#extract content from `response` as a text string
response_text <- content(response, type = "text")
print(response_text)
#PARSING JSON
#install.packages("jsonlite")
library(jsonlite)
#convert a  JSON string to a list
response_data <- fromJSON(response_text)
#check if it is a data frame already
is.data.frame(response_data)
#inspect the data
str(response_data)
names(response_data)
#extract useful data
items <- response_data$items
is.data.frame(items)
#store yelp api key in variable
yelp_key <- "NaZT-Bvr4tRFFlxNH4OJ6HbIQZpRi8g_SgAkB-sxNjv4f0hoaBAgv6ldIJ_g_DriqZr2Mu266oJKmYDxR_Uc7VW5zZRAUC8lL_-_yG73DglbExbKlHIwH84SUo_cYnYx"
# Construct a search query for the Yelp Fusion API's Business Search endpoint
base_uri <- "https://api.yelp.com/v3"
endpoint <- "/businesses/search"
search_uri <- paste0(base_uri, endpoint)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
# Flatten the data frame stored in the `businesses` key of the response
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
# Generate a rank of each restaurant based on row number
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
View(restaurants)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Springfield, MO",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
# Flatten the data frame stored in the `businesses` key of the response
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
# Generate a rank of each restaurant based on row number
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
View(restaurants)
# Store a list of query parameters for Cuban restaurants around Seattle
query_params <- list(
term = "restaurant",
categories = "chinese",
location = "Springfield, MO",
sort_by = "rating",
radius = 8000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including the API key (as a header) and the list of
# query parameters
response <- GET(
search_uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
# Flatten the data frame stored in the `businesses` key of the response
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
# Generate a rank of each restaurant based on row number
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
View(restaurants)
