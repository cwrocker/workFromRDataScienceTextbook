randomSalaries
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salaryAdjustment <- runif(100, -5000, 5000)
salaryAdjustment
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
Salaries2017 <- runif(100, 40000, 50000)
Salaries2017
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, Salaries2017, salaryAdjustment, stringsAsFactors=FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$Salaries2018 <-c(Salaries2017 + salaryAdjustment)
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$GotARaise <- salaryAdjustment > 0
View(salaries)
View(salaries)
# What was the 2018 salary of Employee 57
salaries[57, Salaries2018]
# What was the 2018 salary of Employee 57
salaries[57, 'Salaries2018']
# How many employees got a raise?
sum(salaries$GotARaise == TRUE)
# What was the dollar value of the highest raise?
max(salaries$salaryAdjustment)
# What was the "name" of the employee who received the highest raise?
salaries[max(salaries$salaryAdjustment), "employees"]
# What was the "name" of the employee who received the highest raise?
salaries[ ,max(salaries$salaryAdjustment)]
# What was the "name" of the employee who received the highest raise?
salaries[max(salaries$salaryAdjustment), ]
# What was the "name" of the employee who received the highest raise?
salaries[max(salaries$salaryAdjustment), "employees"]
# What was the "name" of the employee who received the highest raise?
salaries[max(salaries$salaryAdjustment), ]
# What was the "name" of the employee who received the highest raise?
which(salaries==max(salaries$salaryAdjustment))
# What was the "name" of the employee who received the highest raise?
which(salaries$employees==max(salaries$salaryAdjustment))
# What was the "name" of the employee who received the highest raise?
which(salaries[['employees']] == max(salaries$salaryAdjustment))
# What was the "name" of the employee who received the highest raise?
which(salaries == max(salaries$salaryAdjustment))
# What was the "name" of the employee who received the highest raise?
which(salaries == 35939.98)
# What was the "name" of the employee who received the highest raise?
which(salaries == max(salaries$salaryAdjustment))
# What was the "name" of the employee who received the highest raise?
which(salaries$salaryAdjustment == max(salaries$salaryAdjustment))
salaries[max(which(salaries$salaryAdjustment == max(salaries$salaryAdjustment)), "employees"]
salaries[which(salaries$salaryAdjustment == max(salaries$salaryAdjustment)), "employees"]
# What was the largest decrease in salaries between the two years?
min(salaries$salaryAdjustment)
# What was the name of the employee who recieved largest decrease in salary?
salaries[which(salaries$salaryAdjustment == min(salaries$salaryAdjustment)), "employees"]
# What was the average salary change?
average(salaries$salaryAdjustment)
# What was the average salary change?
mean(salaries$salaryAdjustment)
# For people who did not get a raise, how much money did they lose on average?
sum(salaries$GotARaise == FALSE)
# For people who did not get a raise, how much money did they lose on average?
sum(salaries$salaryAdjustment <= 0)/sum(salaries$GotARaise == FALSE)
sum(salaries$salaryAdjustment <= 0)
# For people who did not get a raise, how much money did they lose on average?
AVERAGEIF(salaries$salaryAdjustment <= 0)
# For people who did not get a raise, how much money did they lose on average?
wagesLostSubset <- subset(salaries, salaries$salaryAdjustment <= 0)
mean(wagesLostSubset)
# For people who did not get a raise, how much money did they lose on average?
wagesLostSubset <- c(subset(salaries, salaries$salaryAdjustment <= 0))
mean(wagesLostSubset)
wagesLostSubset
# For people who did not get a raise, how much money did they lose on average?
wagesLostSubset <- subset(salaries, salaries$salaryAdjustment < 0)
mean(wagesLostSubset)
wagesLostSubset
# For people who did not get a raise, how much money did they lose on average?
wagesLostSubset <- subset(salaries$salaryAdjustment, salaries$salaryAdjustment < 0)
mean(wagesLostSubset)
# Write a .csv file of your salary data to your working directory
write.csv(salaries, 'data_files/randomizedEmpSet.csv', row.names = FALSE)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame("USPersonalExpenditure")
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure <- data.frame("USPersonalExpenditure")
# What are the column names of your dataframe?
colnames(USPersonalExpenditure)
# What are the column names of your dataframe?
View(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure <- data.frame(data("USPersonalExpenditure"))
# What are the column names of your dataframe?
View(USPersonalExpenditure)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
View(USPersonalExpenditure)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
exp <- data("USPersonalExpenditure")
exp
View(USPersonalExpenditure)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
View(data("USPersonalExpenditure"))
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
USPersonalExpenditure
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure <- data.frame(USPersonalExpenditure)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditures <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(USPersonalExpenditure)
# What are the row names of your dataframe?
rownames(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditure$category <- rownames(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditures$category <- rownames(USPersonalExpenditure)
View(USPersonalExpenditures)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
View(USPersonalExpenditure)
View(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditures <- data.frame(USPersonalExpenditure)#variables are nearly the same except for an extra 's'
View(USPersonalExpenditures)
# What are the column names of your dataframe?
colnames(USPersonalExpenditures)
# What are the row names of your dataframe?
rownames(USPersonalExpenditure)
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditures$category <- rownames(USPersonalExpenditure)
View(USPersonalExpenditures)
# How much money was spent on personal care in 1940?
USPersonalExpenditures['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditures['Food and Tobacco', 'X1960']
# What was the highest expenditure category in 1960?
USPersonalExpenditures[max(USPersonalExpenditures$X1960), 'X1960']
# What was the highest expenditure category in 1960?
USPersonalExpenditures[max(USPersonalExpenditures$category), 'X1960']
# What was the highest expenditure category in 1960?
USPersonalExpenditures['category', max(USPersonalExpenditures$X1960)]
# What was the highest expenditure category in 1960?
max(USPersonalExpenditures$X1960)
USPersonalExpenditures['Category', 86.8]
which(USPersonalExpenditures$X1960 == max(USPersonalExpenditures$X1960))
USPersonalExpenditures['Category', which(USPersonalExpenditures$X1960 == max(USPersonalExpenditures$X1960))]
USPersonalExpenditures[which(USPersonalExpenditures$X1960 == max(USPersonalExpenditures$X1960)),'category' ]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year)
{
lowestNum<- USPersonalExpenditures[which(USPersonalExpenditures[[year]] == min(USPersonalExpenditures[[year]])),'category' ]
lowestNum
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category(1960)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year)
{
lowestNum<- USPersonalExpenditures[which(USPersonalExpenditures[year] == min(USPersonalExpenditures[year])),'category' ]
lowestNum
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category(1960)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year)
{
lowestNum<- USPersonalExpenditures[which(USPersonalExpenditures[year] == min(USPersonalExpenditures[year])),'category' ]
year
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category(1960)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year)
{
yearCategory <- paste0("X", year)
lowestNum<- USPersonalExpenditures[which(USPersonalExpenditures[yearCategory] == min(USPersonalExpenditures[yearCategory])),'category' ]
year
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category(1960)
lowestNum
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year)
{
yearCategory <- paste0("X", year)
lowestNum<- USPersonalExpenditures[which(USPersonalExpenditures[yearCategory] == min(USPersonalExpenditures[yearCategory])),'category' ]
lowestNum
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category(1960)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
lowest_category(1955)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
yearVector <- c('X1940', 'X1945', 'X1950', 'X1955')
sapply(yearVector, lowest_category)
lapply(yearVector, lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
yearVector <- c('X1940', 'X1945', 'X1950', 'X1955', 'X1960')
sapply(yearVector, lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
yearVector <- c(1940, 1945, 1950, 1955, 1960)
sapply(yearVector, lowest_category)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv('chapter_10_exercises\gates_money.csv' , stringsAsFactors=FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv('chapter_10_exercises/gates_money.csv' , stringsAsFactors=FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('chapter_10_exercises/gates_money.csv' , stringsAsFactors=FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[which(grants[total_amount] == max(grants[total_amount])),'organization' ]
# Which organization received the largest grant?
grants['organization',which(grants[total_amount] == max(grants[total_amount]))]
# Which organization received the largest grant?
grants[,which(grants[total_amount] == max(grants[total_amount]))]
# Which organization received the largest grant?
grants[,which(grants$total_amount == max(grants$total_amount))]
# Which organization received the largest grant?
grants[which(grants$total_amount == max(grants$total_amount)), 'organization']
# Which organization received the smallest grant?
grants[which(grants$total_amount == min(grants$total_amount)), 'organization']
# How many grants were awarded in 2010?
grant2010Subset <- subset(grants$start_year, grants$start_year ==2010)
sum(grant2010Subset)
sum(grant2010Subset)/2010
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('https://raw.githubusercontent.com/programming-for-data-science/book-exercises/master/chapter-10-exercises/exercise-5/data/female_names.csv')
View(names)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('https://raw.githubusercontent.com/programming-for-data-science/book-exercises/master/chapter-10-exercises/exercise-5/data/female_names.csv')
View(names)
gc()
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('https://raw.githubusercontent.com/programming-for-data-science/book-exercises/master/chapter-10-exercises/exercise-5/data/female_names.csv')
View(names)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- data.frame(which(names$year==2013))
View(names_2013)
# Create a data frame `names_2013` that contains only the rows for the year 2013
namesDF <- data.frame(names)
names_2013 <- subset(namesDF, namesDF$year==2013)
View(names_2013)
# What was the most popular female name in 2013?
sort(table(names_2013), decreasing = TRUE)[1:3]
# What was the most popular female name in 2013?
tail(names(sort(table(names_2013$name))), 1)
# What was the most popular female name in 2013?
sort(table(names_2013$name), decreasing = TRUE)[1:3]
# What was the most popular female name in 2013?
get_mode <- function(x){
return(names(sort(table(x), decreasing = T, na.last = T)[1]))
}
get_mode(names_2013$name)
# What was the most popular female name in 2013?
most_popular_name_2013 <- names_2013[names_2013$prop == max(names_2013$prop), "name"]
most_popular_name_2013
# What was the most popular female name in 2013?
get_mode <- function(x){
return(names(sort(table(x), decreasing = T, na.last = T)[1]))
}
get_mode(names_2013$name)
install.packages('tidyverse')
#install.packages('tidyverse')
install.packages('pscl')
#install.packages('tidyverse')
#install.packages('pscl')
library("pscl")
View(presidentialElections)
#select the year and demVotes (percentage of votes won by the Democrat) from the presidential elections dataframe
votes <- select(presidentialElections, year, demVote)
#install.packages('tidyverse')
#install.packages('pscl')
library("dplyr")
library("pscl")
#select the year and demVotes (percentage of votes won by the Democrat) from the presidential elections dataframe
votes <- select(presidentialElections, year, demVote)
View(votes)
#select columns `state` through `year`
View(select(presidentialElections, state:year))
#select all columns except for south
View(select(presidentialElections, -south))
#filter will extract rows that match ALL given conditions
votes_Colorado_2008 <- filter(presidentialElections, year ==2008, state=='Colorado')
votes_Colorado_2008
View(votes_Colorado_2008)
View(votes_2008)
#filter function allows a person to choose what rows they desire
votes_2008 <- filter(presidentialElections, year ==2008)
View(votes_2008)
#add an `other_parties_vote` column that is a percentage of the votes for other parties
#also add an `abs_vote_difference ` column of the differences between percentages
presidentialElections <- mutate(
presidentialElections,
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
#note: mutate() does not change the original data frame, but instead creates a new data frame
presidentialElections
#arrange rows in decreasing order by year, then demVote within each Year
presidentialElections <- arrange(presidentialElections, -year, 'demVote')
View(presidentialElections)
#arrange rows in decreasing order by year, then demVote within each Year
presidentialElections <- arrange(presidentialElections, -year, demVote)
View(presidentialElections)
#compute summary statistics for the `presidentialElections` Data frame
average_votes <- summarize(
presidentialElections,
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
pull(average_votes)
View(pull(average_votes))
average_votes
#filter down to 2008 vote
votes_2008 <- filter(presidentialElections, year ==2008)
#filter to state with highest demVote
most_dem_votes <- filter(votes_2008, demVote ==max(demVote))
#select name of state
most_dem_state <- select(most_dem_votes, state)
most_dem_state
#a better way to do it to avoid having to change the algorithm frequently later:
most_dem_state <- select(
filter(
filter(
presidentialElections,
year == 2008
),
demVote == max(demVote)
),
state
)
most_dem_state <- presidentialElections %>%
filter(year==2008) %>%
filter(demVote==max(demVote)) %>%
select(state)
most_dem_state
#can use the group_by() function to create associations among groups of rows
#so you can easily perform aggregations
grouped <- group_by(presidentialElections, state)
grouped
#for example: create summary statistics by state: average percentages across the years
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
View(state_voting_summary)
#for example
combined_data <-left_join(donations, donors, by = "donor_name")
#for example
View(donations)
#for example
?pscl
#for example
??pscl
install.packages("nycflights13")
#install.packages("nycflights13")
library("dplyr")
library("nycflights13")
#learning about the `flights` data set
?flights
?flights #documentation
dim(flights) #check number of rows and columns
colnames(flights) #inspect column names
View(flights) #look at the data frame in the RStudio viewer
has_most_delays <- flights %>% #start with the flights
group_by(carrier) %>% #group by airline carrier
filter(dep_delay >0) %>% # find only the delays
summarize(num_delay =n()) %>% # count the observations
filter(num_delay == max(num_delay)) %>% #find most delayed
select(carrier) #select the airline
most_delayed_name <- has_most_delays %>% #start with previous answer
left_join(airlines, by = 'carrier') %>% #join on airline ID
select(name)  #select airline name
print(most_delayed_name$name) #access value
#calculate average delay by destination airport, omitting NA results
most_early <- flights %>%
group_by(dest) %>%
summarize(delay, mean(arr_delay, na.rm=TRUE)) #na.rm removes any NA (not available or null) values
#calculate average delay by destination airport, omitting NA results
most_early <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay, na.rm=TRUE)) #na.rm removes any NA (not available or null) values
most_early
#calculate average delay by destination airport, omitting NA results
avg_delay <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay, na.rm=TRUE)) #na.rm removes any NA (not available or null) values
#identify the destination where flights, on average, arrive most early
most_early <- flights %>%
group_by(dest) %>%
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>% #compute mean delay and set it a column called `delay`
filter(delay == min(delay, na.rm = TRUE)) %>% #filter for least delayed
select(dest, delay) %>% #select the destination (and delay to store it)
left_join(airports, by = c("dest" = "faa")) %>% #join on `airports` data
select(dest, name, delay) #select output variables
print(most_early)
flights %>%
group_by(month) %>% #group by selected feature
summarize(delay ==mean(arr_delay, na.rm=TRUE)) %>% #summarize delays
filter(delay == max(delay)) %>% #filter for the record of interest
select(month) %>% #select column that answers the question
print() #print result directly
flights %>%
group_by(month) %>% #group by selected feature
summarize(delay = mean (arr_delay, na.rm=TRUE)) %>% #summarize delays
filter(delay == max(delay)) %>% #filter for the record of interest
select(month) %>% #select column that answers the question
print() #print result directly
#compute delay by month, adding month names for visual display
#note, `month.name` is a variable built into R
delay_by_month <- flights %>%
group_by(month) %>%
summarize(delay = mean (arr_delay, na.rm=TRUE)) %>%
select(delay) %>%
mutate(month = month.name)
#create a plot using ggplot 2 (which I will learn in a later chapter)
library(ggplot2)
ggplot(data = delay_by_month) +
geom_point(
mapping = aes(x = delay, y = month),
color = "blue",
alpha = .4,
size = 3
) +
geom_vline(xintercept = 0, size = .25) +
xlim(c(-20,20)) +
scale_y_discrete(limits = rev(month.name)) +
labs(title = "Average Delay by Month", y = "", x ='Delay (minutes)')
