count(unique(manufacturers))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(manufacturers)
# Filter the data set for vehicles manufactured in 1997
which(vehicles$year == 1997)
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- subset(vehicles$make, vehicles$make ==1997)
vechicles1997
View(vechicles1997)
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- subset(manufacturers$make, manufacturers$make ==1997)
View(vechicles1997)
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- subset(manufacturers, manufacturers$make ==1997)
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- subset(vehicles, vehicles$make ==1997)
View(vechicles1997)
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- subset(manufacturers, manufacturers$make ==1997)
View(vechicles1997)
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- subset(manufacturers, manufacturers[make] ==1997)
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- subset(manufacturers, manufacturers[[make]] ==1997)
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- manufacturers[manufacturers, year ==1997]
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- manufacturers[manufacturers, manufacturers$year ==1997]
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- vehicles[vehicles, vehicles$year ==1997]
[vehicles, vehicles$year ==1997,]
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- vehicles[vehicles, vehicles[year] ==1997]
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- vehicles[vehicles, vehicles[[year]] ==1997]
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- vehicles[vehicles, vehicles$year ==1997]
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- vehicles[vehicles$year ==1997]
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- vehicles[vehicles, vehicles$year ==1997]
vehicles$year
vehicles$year ==1997
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- vehicles[vehicles, vehicles$year ==1997]
# Filter the data set for vehicles manufactured in 1997
vechicles1997 <- vehicles[vehicles$year ==1997,]
View(vechicles1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vechicles1997[order(vechicles1997$hwy)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vechicles1997[order(vechicles1997$hwy,)]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vechicles1997[order(vechicles1997$hwy), ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
arrangedVehicles <- vechicles1997[order(vechicles1997$hwy), ]
View(arrangedVehicles)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vechicles1997 <- vechicles1997[order(vechicles1997$hwy), ]
View(vechicles1997)
# Mutate the 1997 cars data frame to add a column `average` that has the vechicles1997
# gas milage (between city and highway mpg) for each car
vechicles1997 <- mutate(
vechicles1997,
avg_gas_mileage <- mean(vechicles1997$hwy, vechicles1997$cty)
)
# Mutate the 1997 cars data frame to add a column `average` that has the vechicles1997
# gas milage (between city and highway mpg) for each car
library(dplyr)
vechicles1997 <- mutate(
vechicles1997,
avg_gas_mileage <- mean(vechicles1997$hwy, vechicles1997$cty)
)
vechicles1997 <- mutate(
vechicles1997,
avg_gas_mileage <- (vechicles1997$hwy + vechicles1997$cty)/2
)
vechicles1997
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twoWheelVehicles <- filter(
vehicles,
drive == '2-Wheel Drive',
cty >20
)
View(twoWheelVehicles)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worstHwyMpg <- filter(
twoWheelVehicles,
hwy = min(twoWheelVehicles$hwy),
select(twoWheelVehicles$id)
)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worstHwyMpg <- filter(
twoWheelVehicles,
hwy == min(twoWheelVehicles$hwy),
select(twoWheelVehicles$id)
)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worstHwyMpg <- filter(
twoWheelVehicles,
hwy == min(twoWheelVehicles$hwy),
select(hwy, twoWheelVehicles)
)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worstHwyMpg <- filter(
twoWheelVehicles,
hwy == min(twoWheelVehicles$hwy)
)
select(hwy, twoWheelVehicles)
select(worstHwyMpg, twoWheelVehicles)
select(worstHwyMpg, twoWheelVehicles$id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worstHwyMpg <- select(
filter(
twoWheelVehicles,
hwy == min(twoWheelVehicles$hwy)
) ,
id
)
worstHwyMpg
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(model == modelMake) %>%
filter(hwy == max(hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, Honda)
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(model == modelMake) %>%
filter(hwy == max(hwy)) %>%
select(make)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(model == modelMake) %>%
filter(hwy == max(twoWheelVehicles$hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
best_vehicle
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(model == modelMake) %>%
filter(hwy == max(twoWheelVehicles$hwy)) %>%
print(select(model))
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(model == modelMake) %>%
filter(hwy == max(twoWheelVehicles$hwy)) %>%
print(select(twoWheelVehicles$model))
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(model == modelMake) %>%
filter(hwy == max(twoWheelVehicles$hwy)) %>%
select(vehicles$model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
best_vehicle
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(make == modelMake) %>%
filter(hwy == max(twoWheelVehicles$hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
best_vehicle
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
print(best_vehicle)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(make == modelMake) %>%
filter(hwy == max(vehicles$hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
print(best_vehicle)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(make == modelMake) %>%
filter(hwy == max(vehicles$hwy)) %>%
print(select(vehicles$model))
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(make == modelMake) %>%
filter(hwy == max(vehicles$hwy)) %>%
print(select(vehicles$model))
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(make == modelMake) %>%
filter(hwy == max(vehicles$hwy)) %>%
select(vehicles$model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
rlang::last_error()
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
best_Model <- vehicles %>%
filter(year == modelYear) %>%
filter(make == modelMake) %>%
filter(hwy == max(vehicles$hwy)) %>%
select(model)
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
print(best_vehicle)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
best_vehicle <- function(modelYear, modelMake)
{
narrow_Down <- vehicles[vehicles$year == modelYear && vehicles$make == modelMake]
narrow_Down[narrow_Down$hwy == max(narrow_Down$hwy), "model"]
narrow_Down
}
# What was the most efficient Honda model of 1995?
best_vehicle(1995, 'Honda')
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_year_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), "model"]
}
# What was the most efficient Honda model of 1995?
best_vehicle('Honda', 1995)
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library("fueleconomy")
View(fueleconomy)
?fueleconomy
??fueleconomy
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
devtools::install_github("hadley/fueleconomy")
library("fueleconomy")
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
bestAcura2015 <- filter(fueleconomy.class)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
bestAcura2015 <- filter(vehicles, make =='Acura', make == 2015)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura2015 <- filter(vehicles, make =='Acura', make == 2015)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura2015 <- filter(vehicles, make =='Acura', make == 2015)
bestAcura2015 <- select(filter(acura2015, hwy == max(hwy)), model)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura2015 <- filter(vehicles, make =='Acura', make == 2015)
bestAcura2015 <- select(filter(acura2015, hwy == max(hwy, na.rm=TRUE)), model)
View(acura2015)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura2015 <- filter(vehicles, make =="Acura", make == 2015)
View(acura2015)
View(vehicles)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acuras <- filter(vehicles, make == "Acura", year == 2015)
best_acura <- filter(acuras, hwy == max(hwy))
best_model <- select(best_acura, model)
best_model
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura2015 <- filter(vehicles, make =="Acura", make == 2015)
bestAcura2015 <- filter(acura2015, hwy == max(hwy)
bestAcura2015 <- filter(acura2015, hwy == max(hwy))
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura2015 <- filter(vehicles, make =="Acura", make == 2015)
bestAcura2015 <- filter(acura2015, hwy == max(hwy))
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura2015 <- filter(vehicles, make == "Acura", year == 2015)
bestAcura2015 <- filter(acura2015, hwy == max(hwy))
hwy == max(hwy))
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura2015 <- filter(vehicles, make == "Acura", year == 2015)
bestAcura2015 <- filter(acura2015, hwy == max(hwy))
bestModel <- select(bestAcura2015, model)
bestModel
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
bestModel <- select(
filter(
filter(
vehicles,
make == "Acura",
year == 2015
),
hwy == max(hwy)
),
model
)
bestModel
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
bestModel2 <- select(
filter(
filter(
vehicles,
make == "Acura",
year == 2015
),
hwy == max(hwy)
),
model
)
bestModel2
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
best_model3 <- vehicles %>%
filter(make == "Acura", year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
best_model3
# Load the `dplyr` library
library('dplyr')
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
read.csv("https://github.com/programming-for-data-science/book-exercises/blob/master/chapter-11-exercises/exercise-7/data/nba_teams_2016.csv", stringsAsFactors = FALSE)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
nbaStats <- read.csv("https://github.com/programming-for-data-science/book-exercises/blob/master/chapter-11-exercises/exercise-7/data/nba_teams_2016.csv", stringsAsFactors = FALSE)
# View the data frame you loaded, and get some basic information about the
# number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*" following
# the names of teams that made it to the playoffs that year.
View(nbaStats)
# Use the `read.csv()` function to read in the included data set. Remember to
# save it as a variable.
nbaStats <- read.csv("https://raw.githubusercontent.com/programming-for-data-science/book-exercises/master/chapter-11-exercises/exercise-7/data/nba_teams_2016.csv", stringsAsFactors = FALSE)
# View the data frame you loaded, and get some basic information about the
# number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*" following
# the names of teams that made it to the playoffs that year.
View(nbaStats)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
mutate(nbaStats, turnoverStealRatio = TOV / STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nbaWithTurnoverSteal <- mutate(nbaStats, turnoverStealRatio = TOV / STL)
View(nbaWithTurnoverSteal)
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
arrange(nbaWithTurnoverSteal, turnoverStealRatio)
select(filter(turnoverStealRatio == max(turnoverStealRatio)), Team)
maxTeam <- select(filter(turnoverStealRatio == max(turnoverStealRatio)), Team)
maxTeam
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
nbaWithTurnoverSteal <- mutate(nbaStats, turnoverStealRatio = TOV / STL)
View(nbaWithTurnoverSteal)
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
arrange(nbaWithTurnoverSteal, turnoverStealRatio)
maxTeam <- select(filter(turnoverStealRatio == max(turnoverStealRatio)), Team)
maxTeam <- select(filter(nbaWithTurnoverSteal$turnoverStealRatio == max(nbaWithTurnoverSteal$turnoverStealRatio)), nbaWithTurnoverSteal$Team)
# Sort the teams from lowest turnover/steal ratio to highest
# Which team has the lowest turnover/steal ratio?
arrange(nbaWithTurnoverSteal, turnoverStealRatio)
maxTeam <- select(filter(turnoverStealRatio == max(turnoverStealRatio)), Team)
maxTeam <- select(filter(turnoverStealRatio == max(turnoverStealRatio),), Team)
maxTeam
maxTeam <- select(filter(turnoverStealRatio == max(turnoverStealRatio),), Team)
maxTeam <- select(filter(nbaWithTurnoverSteal, turnoverStealRatio == max(turnoverStealRatio)), Team)
maxTeam
# Using the pipe operator, create a new column of assists per game (AST / G)
# AND sort the data.frame by this new column in descending order.
topAssistsPerGame <- nbaStats %>%
mutate(assistsPerGame = AST / G) %>%
arrange(-assistsPerGame)
topAssistsPerGame
nbaStats
# Using the pipe operator, create a new column of assists per game (AST / G)
# AND sort the data.frame by this new column in descending order.
topAssistsPerGame <- nbaWithTurnoverSteal %>%
mutate(assistsPerGame = AST / G) %>%
arrange(-assistsPerGame)
topAssistsPerGame
# Using the pipe operator, create a new column of assists per game (AST / G)
# AND sort the data.frame by this new column in descending order.
topAssistsPerGame <- nbaStats %>%
mutate(assistsPerGame = AST / G) %>%
arrange(-assistsPerGame)
View(nbaStats)
