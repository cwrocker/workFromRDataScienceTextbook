v6
#add a fourth element
v6[4] <- 1260
v6
# add anothetr element to the end
next_index<- length(v6) + 1
v6[next_index] <- 17
v6
v6[c(3,5)] <- 17
v6
v6[c(3,5)] <- 19
v6
#can also combine elements including other vectors
larger_v6 <- c(v6, v1)
larger_v6
#and use vector filtering
final_version[larger_v6/2 == 0] <-"welp"
#and use vector filtering
larger_v6[larger_v6/2 == 0] <-"welp"
larger_v6
#and use vector filtering
larger_v6[larger_v6/2 > 0] <-"welp"
larger_v6
#and use vector filtering
larger_v6[larger_v6 > 10] <-"welp"
larger_v6
#can also modify vectors
v6 <- c(55,65, 75)
v6
#change first element
v6[1] <- 120
v6
#add a fourth element
v6[4] <- 1260
v6
# add anothetr element to the end
next_index<- length(v6) + 1
v6[next_index] <- 17
v6
#can replace multiple values
v6[c(3,5)] <- 19
v6
#can also combine elements including other vectors
larger_v6 <- c(v6, v1)
larger_v6
#and use vector filtering
larger_v6[larger_v6 > 10] <-"welp"
larger_v6
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Pikachu", "Baby Yoda")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
n
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n <- n+1
print(n)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10:1)
m
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- rev(seq(10:1))
m
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
n
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
n+1
print(n)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- rev(seq(10:1))
m
# Subtract `m` FROM `n`. Note the recycling!
m-n
# Subtract `m` FROM `n`. Note the recycling!
n-m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
x_range
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave<- sin_wave*cos_wave+sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
first_ten
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
next_ten
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
all_numbers
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
eleventh
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers[2:5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
some_numbers
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(0,100,2)
even
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(0,100,2)
even
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all( even %% 2 ==0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)#before you ask, yes I get this reference
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
prefix
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers > 5
small
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers > 5]
small
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers < 5]
small
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
small
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
large
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers%%2 != 0] <- 0
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)#before you ask, yes I get this reference
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
prefix
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
small
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
large
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
phone_numbers
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers%%2 != 0] <- 0
phone_numbers
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'flagged', 'artifice')
words
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- c(words,`is the word of the day!` )
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- c(words,'is the word of the day!' )
words_of_the_day
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- words,'is the word of the day'
words_of_the_day
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- words + 'is the word of the day'
words_of_the_day
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- conc(words, 'is the word of the day')
words_of_the_day
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'flagged', 'artifice')
words
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words, 'is the word of the day')
words_of_the_day
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(\"",words, 'is the word of the day')
words_of_the_day
mystring <- "Hello pals, welcome on board to the \"Captain\" boat" # using the \" escape character
# printign the string variable
mystring
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'flagged', 'artifice')
words
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste( "'",words,"'" ,'is the word of the day')
words_of_the_day
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words_of_the_day[words_of_the_day <= 'f']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'flagged', 'artifice')
a_f_words <- words_of_the_day[words_of_the_day <= 'f']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'flagged', 'artifice')
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'flagged', 'artifice')
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words <= 'f']
a_f_words
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'f', 'artifice')
words
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste( "'",words,"'" ,'is the word of the day')
words_of_the_day
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words <= 'f']
a_f_words
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'flagged', 'artifice')
words
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste( "'",words,"'" ,'is the word of the day')
words_of_the_day
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words <= 'f']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words < 'f']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words > 'f']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words < 'g']
a_f_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words > 'g' && words < 'n']
g_m_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[words <'n'] > 'g']
g_m_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[words >'g'] < 'n']
g_m_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[words >'h'] < 'n']
g_m_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[words >'g'] < 'n']
g_m_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[words[words < 'g'] >'g'] < 'n']
g_m_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[words >'f'] < 'n']
g_m_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[words >'i'] < 'n']
g_m_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words < 'g']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words < 'f']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words <= 'f']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[words =< 'f']
a_f_words
'flagges' < 'f'
'flagged' < 'f'
'flagged'[1]
'flagged'-'f'
'flagged'>'f'
'f'>'f'
'f'>='f'
library(stringr)
# Exercise 3: vector practice
library(stringr)
# Exercise 3: vector practice
library(stringr)
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- str_subset(words, 'a':'f')
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- str_subset(words, ['a':'f'])
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substr(words,1,1)< 'f']
a_f_words
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substr(words,1,1)<= 'f']
a_f_words
# Exercise 3: vector practice
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c('loquacious', 'venality', 'musicality', 'obseqious', 'flagged', 'artifice')
detach("package:stringr", unload = TRUE)
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substr(words,1,1)<= 'f']
a_f_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[substr(words,1,1) >='g'] < 'n']
g_m_words
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(wordVector, smallerLetter, largerLetter)
{
wordVector[wordVector[substr(wordVector,1,1) >=smallerLetter] < largerLetter]
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','q')
g_m_words <- words[words[substr(words,1,1) >='e'] < 'q']
g_m_words
# Create a vector `g_m_words` which are the elements in `words` that start with
# "g" through "m"
g_m_words <- words[words[substr(words,1,1) >='g'] < 'n']
g_m_words
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','q')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','f')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','g')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','h')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','i')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','m')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','l')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','m')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','n')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','o')
# Create a vector `a_f_words` which are the elements in `words` that start with
# "a" through "f"
# Hint: use a comparison operator to see if the word comes before "f" alphabetically!
# Tip: make sure all the words are lower-case, and only consider the first letter
# of the word!
a_f_words <- words[substr(words,1,1)<= 'f']
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','p')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','k')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','l')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','m')
