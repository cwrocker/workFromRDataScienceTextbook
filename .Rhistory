# through "q"
word_bin(words, 'e','k')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','l')
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, 'e','m')
#creating a list
programmer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
likeMachineLearning = TRUE
)
programmer
#creating a list without tagged elements
badlist <- list('cwrocker', 'Data_Scientist', 'Christianity', 50, TRUE)
badlist
#create a list such that it has a list within it
programmer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
guitarsUsed = list(
main_Electric: 'Gibson_Les_Paul',
backUpElectric: 'Dean_Zelinsky_Telecaster'
),
likeMachineLearning = TRUE
)
#create a list such that it has a list within it
newProgrammer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
guitarsUsed = list(
main_Electric: 'Gibson_Les_Paul',
backUpElectric: 'Dean_Zelinsky_Telecaster'
),
likeMachineLearning = TRUE
)
#create a list such that it has a list within it
newProgrammer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
likeMachineLearning = TRUE,
guitarsUsed = list(
main_Electric: 'Gibson_Les_Paul',
backUpElectric: 'Dean_Zelinsky_Telecaster'
)
)
#create a list such that it has a list within it
newProgrammer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
guitarsUsed = list(
main_Electric =  'Gibson_Les_Paul',
backUpElectric ='Dean_Zelinsky_Telecaster'
),
likeMachineLearning = TRUE
)
#create a list such that it has a list within it
programmer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
guitarsUsed = list(
main_Electric =  'Gibson_Les_Paul',
backUpElectric ='Dean_Zelinsky_Telecaster'
),
likeMachineLearning = TRUE
)
programmer
programmer$userName
programmer$guitarsUsed$backUpElectric
install.packages(c("bslib", "rlang", "sass"))
#also can accessing them with numbers
programmer[[1]]
#also can accessing them with numbers
programmer[[5]]
#also can accessing them with numbers
programmer[[5[[2]]]]
#also can accessing them with numbers
programmer[[5,2]]
#also can accessing them with numbers
programmer[[5]]
#also can accessing them with numbers
programmer[[2]]
programmer[[6]]
#or using brackets with the tag
programmer[['faith']]
programmer[['guitarStringsNeeded']]
#note lists can contain complex values such as other vectors
resume <- list(
qualifications <- list(
education = "Bachelors of Science in Information Technology: Application Development",
research = "Using Machine Learning for Image Recognition of Microcracks"
),
skills = c("Tableau", "Python", "R", "C#")
)
#store qualifications elements in variable
currentQualifications <-resume$qualifications
#can acees the qualifications list Now
currentQualifications$education
currentQualifications
#note lists can contain complex values such as other vectors
resume <- list(
qualifications = list(
education = "Bachelors of Science in Information Technology: Application Development",
research = "Using Machine Learning for Image Recognition of Microcracks"
),
skills = c("Tableau", "Python", "R", "C#")
)
#store qualifications elements in variable
currentQualifications <-resume$qualifications
#can acees the qualifications list Now
currentQualifications$education
#can also access vectors elements
resume$skills[3]
#can also modify list elements as if they were vectors
programmer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
likeMachineLearning = TRUE
)
#no element containing favoriteFood
programmer$favoriteFood
#can add that to the list
programmer$favoriteFood <- "Pizza"
programmer
#reassign guitarStringNeeded value
programmer$guitarStringsNeeded <- 100
programmer
#remove the value for username
programmer$userName <- NULL
programmer
#compare single to double brackets
programmer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
likeMachineLearning = TRUE
)
#single brackets return a list
programmer['userName']
is.list(programmer['userName'])
#double brackets return vector
programmer[['userName']]
is.vector(programmer['userName'])
is.vector(programmer[['userName']])
is.list(programmer[['userName']])
#can use this to create vector column names to create a filtered sublist
programmer[c('userName', 'futureGoal', 'faith', 'likeMachineLearning', 'guitarStringsNeeded')]
#apply the toupper function to eachlement in the untaggedlist
lapply(untaggedList, toupper)
#start with an untagged list
untaggedList <- list('cwrocker', 'Data_Scientist', 'Christianity')
#apply the toupper function to eachlement in the untaggedlist
lapply(untaggedList, toupper)
#add in the paste function using lapply with the phrase 'is cool'
lapply(untaggedList, paste, 'is cool!')
View(newProgrammer)
gc()
gc()
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("Pancakes", "Bacon", "Eggs")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("Sandwhich", "Thin_Mints", "Arnie_Palmer")
# Create a list `meals` that has contains your breakfast and lunch
meals<- list(
breakfast = my_breakfast,
lunch = my_lunch
)
meals$breakfast
meals$breakfast[3]
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c('Burgers', "Fries", 'Milkshake')
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- c(meals$dinner)
dinner
is.vector(dinner)
is.list(programmer[['userName']])
#compare single to double brackets
programmer <- list(
userName = 'cwrocker',
futureGoal = 'Data_Scientist',
faith = 'Christianity',
guitarStringsNeeded = 50,
likeMachineLearning = TRUE
)
#single brackets return a list
#this essentially is a tool to filter of a collection
#creating a filtered sublist in the process
programmer['userName']
is.list(programmer['userName'])
#double brackets return vector
programmer[['userName']]
is.vector(programmer[['userName']])
is.list(programmer[['userName']])
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
list[5] <- meals[['lunch']]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- meals[['lunch']]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[['lunch']]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(
breakfast = meals['breakfast'],
lunch = meals['lunch']
)
early_meals$breakfast
numberofItemsEaten$breakfast
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numberofItemsEaten <- list(
breakfast = lappply(meals$breakfast, length),
lunch = lappply(meals$lunch, length),
dinner = lappply(meals$dinner, length)
)
numberofItemsEaten$breakfast
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numberofItemsEaten <- list(
breakfast = lappply(meals$breakfast, length),
lunch = lappply(meals$lunch, length),
dinner = lappply(meals$dinner, length)
)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numberofItemsEaten <- list(
breakfast = lapply(meals$breakfast, length),
lunch = lapply(meals$lunch, length),
dinner = lapply(meals$dinner, length)
)
numberofItemsEaten$breakfast
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numberofItemsEaten <- list(
breakfast = lapply(my_breakfast, length),
lunch = lapply(my_lunch, length),
dinner = lapply(dinner, length)
)
numberofItemsEaten$breakfast
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numberofItemsEaten <- list(
breakfast = lapply(my_breakfast, length()),
lunch = lapply(my_lunch, length()),
dinner = lapply(dinner, length())
)
numberofItemsEaten$breakfast
length(my_breakfast)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numberofItemsEaten <- list(
breakfast = length(my_breakfast),
lunch = length(my_lunch),
dinner = length(dinner)
)
numberofItemsEaten$breakfast
numberofItemsEaten$lunch
numberofItemsEaten$dinner
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function (mealVector)
{
endofVector<-length(mealVector)
mealVector[endofVector+1]<- 'pizza'
}
add_pizza(my_breakfast)
my_breakfast
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function (mealVector)
{
endofVector<-length(mealVector)
mealVector[endofVector+1]<- 'pizza'
mealVector
}
add_pizza(my_breakfast)
my_breakfast
better_meals <- add_pizza(my_lunch)
better_meals
# Create a *list* of 10 random numbers. Use the `runif()` function to make a
# vector of random numbers, then use `as.list()` to convert that to a list
randomNumbers <- c(runif(10, 0, 1000))
randomNumbers
randomNumbers
as.List(randomNumbers)
as.list(randomNumbers)
# Use `lapply()` to apply the `round()` function to each number, rounding it to
# the nearest 0.1 (one decimal place)
lapply(randomNumbers, round)
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence,"")
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "I mam making a sentence because the magical textbook people told me to."
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence,"")
# Extract the vector of letters from the resulting list
letters <- c(sentence)
letters
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "I am making a sentence because the magical textbook people told me to."
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
strsplit(sentence,"")
# Extract the vector of letters from the resulting list
letters <- c(sentence)
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(letters))
uniqueLetters
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
splitString<-strsplit(sentence,"")
# Extract the vector of letters from the resulting list
letters <- c(splitString)
letters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(letters))
uniqueLetters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(sentence))
uniqueLetters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(splitString))
uniqueLetters
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- "I am making a sentence because the magical textbook people told me to."
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
splitString<-strsplit(sentence,"")
# Extract the vector of letters from the resulting list
letters <- c(splitString)
letters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(letters))
uniqueLetters
A <- c(1, 2, 3, 3, 2, 5, 6, 7, 6, 5)
# Calling the unique() function over the
# above vector to remove duplicate values
unique(A)
A <- c('h','e','e','l','l','o')
# Calling the unique() function over the
# above vector to remove duplicate values
unique(A)
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
splitString<-c(strsplit(sentence,""))
# Extract the vector of letters from the resulting list
letters <- c(splitString)
letters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(letters))
uniqueLetters
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- 'I am making a sentence because the magical textbook people told me to.'
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
splitString<-c(strsplit(sentence,""))
# Extract the vector of letters from the resulting list
letters <- c(splitString)
letters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(letters))
uniqueLetters
A <- c('h','e','e','l','l','o')
unique(A)
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- 'I am making a sentence because the magical textbook people told me to.'
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
splitString<-(strsplit(sentence,""))
# Extract the vector of letters from the resulting list
letters <- (splitString)
letters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(cletters))
uniqueLetters
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- 'I am making a sentence because the magical textbook people told me to.'
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
splitString<-(strsplit(sentence,""))
# Extract the vector of letters from the resulting list
letters <- (splitString)
letters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- c(unique(c(letters)))
uniqueLetters
A <- c('ello')
unique(A)
strsplit(A,"")
unique(A)
unique(strsplit(A,""))
unique(c(strsplit(A,"")))
# Create a variable 'sentence' that contains a sentence of text (something
# longish). Make the sentence lowercase; you can use a function to help.
sentence <- 'i am making a sentence because the magical textbook people told me to.'
# Use the `strsplit()` function to split the sentence into a vector of letters.
# Hint: split on `""` to split every character
# Note: this will return a _list_ with 1 element (which is the vector of letters)
splitString<-strsplit(sentence,"")
# Extract the vector of letters from the resulting list
letters <- splitString[1]
letters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- unique(letters)
uniqueLetters
# Extract the vector of letters from the resulting list
letters <- splitString[[1]]
letters
# Use the `unique()` function to get a vector of unique letters
uniqueLetters <- unique(letters)
uniqueLetters
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurrences <- function(characterVal =" ", letterVector)
{
normalizeLetters <- tolower(letterVector)
splitletterVector <- strsplit(letterVector, "")
allTheLetters <- splitletterVector[[1]]
trueandFalseTimes <- characterVal == allTheLetters
trueTimes <- allTheLetters[trueandFalseTimes]
}
count_occurrences("m", sentence)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurrences <- function(characterVal =" ", letterVector)
{
normalizeLetters <- tolower(letterVector)
splitletterVector <- strsplit(letterVector, "")
allTheLetters <- splitletterVector[[1]]
trueandFalseTimes <- characterVal == allTheLetters
trueTimes <- allTheLetters[trueandFalseTimes]
trueTimes
}
count_occurrences("m", sentence)
# Define a function `count_occurrences` that takes in two parameters: a letter
# and a vector of letters. The function should return how many times that letter
# occurs in the provided vector.
# Hint: use a filter operation!
count_occurrences <- function(characterVal =" ", letterVector)
{
normalizeLetters <- tolower(letterVector)
splitletterVector <- strsplit(letterVector, "")
allTheLetters <- splitletterVector[[1]]
trueandFalseTimes <- characterVal == allTheLetters
trueTimes <- allTheLetters[trueandFalseTimes]
totalTrueTimes <- length(trueTimes)
totalTrueTimes
}
count_occurrences("m", sentence)
# Call your `count_occurrences()` function to see how many times the letter 'e'
# is in your sentence.
count_occurrences("e", sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(uniqueLetters, sentence, count_occurrences)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(uniqueLetters, count_occurrences)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
sapply(uniqueLetters, count_occurrences, sentence)
# Use `sapply()` to apply your `count_occurrences()` function to each unique
# letter in the vector to determine their frequencies.
# Convert the result into a list (using `as.list()`).
newSentenceList = as.list(sapply(uniqueLetters, count_occurrences, sentence))
# Print the resulting list of frequencies
print(newSentenceList)
